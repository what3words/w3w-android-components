plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-android'
    id 'jacoco'
}

android {
    compileSdk 33

    defaultConfig {
        applicationId "com.what3words.testing"
        minSdk 23
        targetSdk 33
        versionCode 1
        versionName "1.0"

        buildConfigField 'String', 'W3W_PRE_PROD_URL', findProperty('W3W_PRE_PROD_URL') ? "\"${findProperty('W3W_PRE_PROD_URL')}\"" : "\"PRE_PRO_URL_HERE\""
        buildConfigField 'String', 'W3W_API_KEY', findProperty('PRE_PROD_API_KEY') ? "\"${findProperty('PRE_PROD_API_KEY')}\"" : "\"YOUR_API_KEY_HERE\""
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

       // testInstrumentationRunnerArguments clearPackageData: 'true'
       // testInstrumentationRunnerArguments useTestStorageService: 'true'
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
        unitTests.returnDefaultValues = true
    }

    jacoco {
        version = libs.versions.jacoco.get()
    }

    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation libs.androidx.core

    implementation libs.androidx.constraint.layout
    implementation libs.google.android.material


    implementation testLibs.androidx.junit.ktx

    implementation testLibs.androidx.espresso.contrib
    debugImplementation testLibs.androidx.test.rules
    debugImplementation testLibs.androidx.junit
    androidTestImplementation testLibs.androidx.espresso.core
    debugImplementation testLibs.androidx.test.runner
    androidTestUtil testLibs.androidx.test.orchestrator

    implementation libs.what3words.android.wrapper
    implementation project(":lib")

}

task jacocoTestReport(type: JacocoReport, dependsOn: ['createDebugCoverageReport']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    reports {
        xml.enabled(true)
        html.enabled(true)
    }

    def fileFilter = ['android/databinding/**/*.class',
                      '**/*databinding.*',
                      '**/android/databinding/*',
                      '**/androidx/databinding/*',
                      '**/BR.*',
                      '**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      'android/**/*.*',
                      'androidx/**/*.*',
                      'autosuggestsample/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ]))

}